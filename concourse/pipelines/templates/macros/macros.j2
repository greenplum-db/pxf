{#
  Macro that takes an array of config dictionaries, iterated over them and for each swimlane:
  - creates a dictionary with the original attributes
  - adds derived attributes to the dictionary
  - passes this dictionary in a callback method to the caller
  - renders the result of a callback method

  Each config in the input parameter array is a dictionary with the folowing attributes:
  - 'gp_ver'   : major Greenplum version
  - 'build_os' : the name of the OS for building PXF artifacts
  - 'test_os'  : the name of the OS for testing  PXF artifacts
  - 'os_ver'   : the version of the OS
  - 'test_fdw' : whether to test PXF FDW extension in this configuration

  Additional derived attributes added to the "x" context dictionary:
  - 'build_platform'     : the name and version of the OS for building PXF artifacts
  - 'test_platform'      : the name and version of the OS for testing  PXF artifacts
  - 'pkg_type'           : the type of the PXF artifact package (rpm or deb)
  - 'pkg_arch'           : the machine architecture of the package (x86_64 or amd64)
  - 'release_platform'   : the platform used in PXF  artifact file names (el7, el8, el9, ubuntu18.04)
  - 'greenplum_platform' : the platform used in GPDB artifact file names (rhel7, rhel8, el9, ubuntu18.04)
  - 'pxf_platform_infix' : the symbol separating the platform in the PXF artifact names
#}
{% macro for_each_config(configs) %}
    {% for conf in configs %}
        {# set local variables for a given loop iteration #}
        {% set x = dict(conf) %}
        {% do x.update({'build_platform': x.build_os ~ x.os_ver}) %}
        {% do x.update({'test_platform' : x.test_os  ~ x.os_ver}) %}

        {# set OS specific variable values #}
        {% if conf.test_os in [ 'ubuntu' ] %}
            {% do x.update({'pkg_type': 'deb'}) %}
            {% do x.update({'pkg_arch': 'amd64'}) %}
            {% do x.update({'release_platform': 'ubuntu' ~ x.os_ver}) %}
            {% do x.update({'pxf_platform_infix': '-'}) %}
        {% else %} {# other operating systems: centos, rocky and oel #}
            {% do x.update({'pkg_type': 'rpm'}) %}
            {% do x.update({'pkg_arch': 'x86_64'}) %}
            {% do x.update({'release_platform': 'el' ~ x.os_ver}) %}
            {% do x.update({'pxf_platform_infix': '.'}) %}
        {% endif %}

        {# adjust Greenplum release platform due to historical inconsistencies #}
        {% if x.gp_ver in ['5', '6'] and x.release_platform.startswith('el') %}
            {% do x.update({'greenplum_platform': 'rh' ~ x.release_platform}) %}
        {% else %}
            {% do x.update({'greenplum_platform': x.release_platform}) %}
        {% endif %}

        {% do x.update({'pxf_tarball_filename_regex':     'pxf-gp'     ~ x.gp_ver ~ '-*' ~ x.pxf_platform_infix ~ x.release_platform ~ '.tar.gz'}) %}
        {% do x.update({'pxf_fdw_tarball_filename_regex': 'pxf-fdw-gp' ~ x.gp_ver ~ '-*' ~ x.pxf_platform_infix ~ x.release_platform ~ '.tar.gz'}) %}

        {% do x.update({'pxf_release_package_filename_regex': 'pxf-gp' ~ x.gp_ver ~ '-(.*)-2' ~ x.pxf_platform_infix ~ x.release_platform ~ x.pxf_platform_infix ~ x.pkg_arch ~ x.pxf_platform_infix ~ x.pkg_type }) %}

        {# render the result of callback passing the resulting context specific to this loop iteration #}
[[caller(x)]]
    {% endfor %}
{% endmacro %}

{# ----- ANCHOR macros ----- #}
{% macro anchor_destroy_dataproc(cluster_index) %}
    {% include 'anchors/destroy-dataproc-tpl.yml' %}
{% endmacro %}

{% macro anchor_destroy_cluster(cluster_type) %}
    {% include 'anchors/destroy-cluster-tpl.yml' %}
{% endmacro %}

{% macro anchor_slack_notification(use_slack) %}
    {% include 'anchors/slack-alert-tpl.yml' %}
{% endmacro %}

{# ----- RESOURCE TYPES macros ----- #}
{% macro resource_type_registry_image(image_name, image_repository, image_tag) %}
    {% set resource_type = true %}
    {% include 'resources/registry-image-tpl.yml' %}
{% endmacro %}

{# ----- RESOURCES macros ----- #}
{% macro resource_pxf_dependencies(dependency_type) %}
    {% include 'resources/pxf-dependencies-tpl.yml' %}
{% endmacro %}

{% macro resource_singlecluster(hadoop_distro) %}
    {% include 'resources/singlecluster-tpl.yml' %}
{% endmacro %}

{% macro resource_github_repo(repo_name) %}
    {% include 'resources/github-repo-tpl.yml' %}
{% endmacro %}

{% macro resource_slack_notification(slack_alert_name, url_key) %}
    {% include 'resources/slack-notification-tpl.yml' %}
{% endmacro %}

{% macro resource_registry_image(image_name, image_repository, image_tag) %}
    {% set resource_type = false %}
    {% include 'resources/registry-image-tpl.yml' %}
{% endmacro %}

{% macro resource_pxf5_gp6_el7_artifact() %}
    {% include 'resources/pxf5-gp6-el7-artifact-tpl.yml' %}
{% endmacro %}

{% macro resource_pxf6_6_gp6_el7_artifact() %}
    {% include 'resources/pxf6_6-gp6-el7-artifact-tpl.yml' %}
{% endmacro %}

{% macro resource_terraform(cluster_type) %}
    {% include 'resources/terraform-tpl.yml' %}
{% endmacro %}

{% macro job_group(name, filter, configs, clouds, distros) %}
- name: [[name]]
  jobs:
{% call(x) for_each_config(configs) %}
  {% if x.test_platform == filter or x.gp_ver == filter %}
  {% if x.test_os != 'oel' %}
  - build-pxf-gp[[x.gp_ver]]-[[x.test_platform]]
  {% else %}
  - build-pxf-gp[[x.gp_ver]]-centos7
  {% endif %}
  {% if x.test_fdw %}
  {% set extension = 'fdw' %}
  - test-pxf-gp[[x.gp_ver]]-[[extension]]-hdp2-[[x.test_platform]]
  {% endif %}
  {% set extension = 'ext' %}
  - test-pxf-gp[[x.gp_ver]]-[[extension]]-hdp2-[[x.test_platform]]
  {% set extension = '' %}
    {% for test_feature in x.test_features %}
        {% set target = test_feature if (test_feature in distros or test_feature in clouds) else 'hdp2' %}
        {% do x.update({'target': target}) %}
        {% set use_impers = 'false' if (test_feature in clouds or test_feature == 'hdp2') else 'true' %}
        {% do x.update({'use_impers': use_impers}) %}
        {% do x.update({'feature': test_feature}) if test_feature not in distros and test_feature not in clouds %}
        {% set extension        = 'fdw'           if x.use_fdw     == 'true'  else 'ext' %}
        {% set impers_infix     = '-no-impers'    if x.use_impers  == 'false' else ''    %}
        {% set feature_infix    = '-' ~ x.feature if x.feature                else ''    %}
  - test-pxf-gp[[x.gp_ver]]-[[extension]]-[[x.target]][[feature_infix]][[impers_infix]]-[[x.test_platform]]
        {% set extension        = None %}
        {% set impers_infix     = None %}
        {% set feature_infix    = None %}
        {% if test_feature == 's3' %}
  - test-pxf-gp[[x.gp_ver]]-ext-s3-centos7
        {% endif %}
    {% endfor %}
    {% if x.test_platform == 'centos7' and x.gp_ver == '6' %}
  - test-pxf-gp[[x.gp_ver]]-ext-hdp2-upgrade-extension-[[x.test_platform]]
  - test-pxf-gp[[x.gp_ver]]-file-no-impers-[[x.test_platform]]
  - test-pxf-gp[[x.gp_ver]]-ext-hdp2-secure-multi-no-impers-[[x.test_platform]]
    {% endif %}
    {% if x.test_platform == 'rocky8' and x.gp_ver == '7' %}
  - test-pxf-gp[[x.gp_ver]]-cli-rocky8
    {% endif %}
    {% if x.test_multinode %}
  - test-pxf-gp[[x.gp_ver]]-ext-hdp2-secure-multi-[[x.test_platform]]
    {% endif %}
    {% if x.build_platform == x.test_platform %}
    {% if x.test_os != 'oel' or x.test_os != 'ubuntu' %}
  - test-pxf-gp[[x.gp_ver]]-backward-compatibility-[[x.test_platform]]
    {% endif %}
    {% endif %}
    {% endif %}
{% endcall %}
  - testing-gate-for-pxf-gp
  - compatibility-gate-for-pxf-gp
{% endmacro %}
