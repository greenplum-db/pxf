---
# yamllint disable rule:empty-lines

{# import macros to use in this template #}
{% import "macros/macros.j2" as macros %}

{# define supported test features (single-cluster test jobs) and whether their testing is requested by the Makefile via context variables #}
{% set requested_features = {'s3': s3, 'gs': gs, 'adl': adl, 'wasbs': wasbs, 'minio': minio, 'hdp2': hdp2, 'hdp3': hdp3, 'cdh': cdh, 'jdk11': jdk11} %}
{% set supported_features = requested_features.keys() | list %}

{# define whether multinode testing is requested for given EL OS versions #}
{% set requested_multi = {'7': multinode_el7, '8': multinode_el8, '9': multinode_el9} %}

{#
# ======================================================================
# BUILD and TEST Combinations for PXF
# ======================================================================

# gp_ver        : major Greenplum version
# build_os      : the name of the OS used to build PXF artifacts
# test_os       : the name of the OS used to test  PXF artifacts
# os_ver        : the version of the OS
# test_fdw      : whether to test PXF FDW extension in this configuration
# test_file     : whether to test PXF with FILE protocol in this configuration
# test_cli      : whether to test PXF CLI functionality in this configuration
# test_multi    : whether to test PXF against multi-node Hadoop clusters in this configuration
# test_features : an array of features to test PXF with in this configuration
#
# when iterating over the entries, use the following pattern:
# {% call(x) macros.for_each_config(build_test_pxf_combinations) %}
#     <do whatever rendering you need for a combination, can use {% include '.../some-template.yml' %} >
# {% endcall %}
#}

{% set build_test_pxf_combinations = [
    {'gp_ver': '5', 'build_os': 'centos', 'test_os': 'centos', 'os_ver': '7',     'test_fdw': false, 'test_file': false, 'test_cli': false, 'test_multi': false, 'test_features': []},
    {'gp_ver': '6', 'build_os': 'centos', 'test_os': 'centos', 'os_ver': '7',     'test_fdw': false, 'test_file': true , 'test_cli': false, 'test_multi': true , 'test_features': supported_features},
    {'gp_ver': '6', 'build_os': 'rocky' , 'test_os': 'rocky' , 'os_ver': '8',     'test_fdw': true , 'test_file': false, 'test_cli': false, 'test_multi': false, 'test_features': []},
    {'gp_ver': '6', 'build_os': 'rocky' , 'test_os': 'rocky' , 'os_ver': '9',     'test_fdw': false, 'test_file': false, 'test_cli': false, 'test_multi': true , 'test_features': []},
    {'gp_ver': '6', 'build_os': 'centos', 'test_os': 'oel'   , 'os_ver': '7',     'test_fdw': false, 'test_file': false, 'test_cli': false, 'test_multi': false, 'test_features': []},
    {'gp_ver': '6', 'build_os': 'ubuntu', 'test_os': 'ubuntu', 'os_ver': '18.04', 'test_fdw': false, 'test_file': false, 'test_cli': false, 'test_multi': false, 'test_features': []},
    {'gp_ver': '7', 'build_os': 'rocky' , 'test_os': 'rocky' , 'os_ver': '8',     'test_fdw': true , 'test_file': false, 'test_cli': true , 'test_multi': true , 'test_features': []},
    {'gp_ver': '7', 'build_os': 'rocky' , 'test_os': 'rocky' , 'os_ver': '9',     'test_fdw': false, 'test_file': false, 'test_cli': false, 'test_multi': false, 'test_features': []}] %}


{# define supported clouds that have their own 'protocols' #}
{% set clouds = ['s3', 'gs', 'adl', 'wasbs', 'minio'] %}

{# define distros we use for singlecluster setup #}
{% set distros = ['hdp2', 'hdp3', 'cdh'] %}

{# define default distro and impersonation for all test jobs #}
{% set default_distro = 'hdp2' %}
{% set default_impers = 'true' %}

{% set gp_num_versions = { '5': num_gpdb5_versions, '6': num_gpdb6_versions, '7': num_gpdb7_versions} %}

{# define whether CCP should be used #}
{% set use_ccp = multinode_el7 or multinode_el8 or multinode_el9 or multinode_no_impersonation or file or gp7_cli %}

{# define whether IPA should be used #}
{% set use_ipa = multinode_el7 or multinode_el8 or multinode_el9 %}

## ======================================================================
## ANCHORS
## ======================================================================
anchors:
    [[macros.anchor_destroy_dataproc(1)]]
    [[macros.anchor_destroy_dataproc(2)]]
    [[macros.anchor_destroy_cluster('gpdb')]]
    [[macros.anchor_destroy_cluster('ipa-hadoop')]]
    [[macros.anchor_gchat_notification(gchat_notification)]]

## ======================================================================
## RESOURCE TYPES
## ======================================================================
resource_types:

{% if use_ccp %}
    [[macros.resource_type_registry_image('terraform', 'gcr.io/data-gpdb-ud/terraform-resource', '0.11.15')]]
{% endif %}

{% if use_ipa %}
    [[macros.resource_type_registry_image('terraform-0.14.10', 'ljfranklin/terraform-resource', '0.14.10')]]
{% endif %}

    [[macros.resource_type_registry_image('gcs', 'frodenas/gcs-resource', '')]]

{% if gchat_notification %}
    [[macros.resource_type_registry_image('google-chat-notify-resource', 'springio/google-chat-notify-resource', '0.0.1-SNAPSHOT')]]
{% endif %}

## ======================================================================
## RESOURCES
## ======================================================================
resources:
    [[macros.resource_pxf_dependencies('build')]]
    [[macros.resource_pxf_dependencies('automation')]]

    [[macros.resource_singlecluster('hdp2')]]

{% if hdp3 %}
    [[macros.resource_singlecluster('hdp3')]]
{% endif %}

{% if cdh %}
    [[macros.resource_singlecluster('cdh')]]
{% endif %}

## ---------- Github Repos ----------
    [[macros.resource_github_repo('pxf')]]

{% if use_ccp %}
    [[macros.resource_github_repo('ccp')]]
{% endif %}

## ---------- Docker Images ----------
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% if x.test_platform != 'oel7' or oel7 %}
        {% include 'resources/pxf-test-image-tpl.yml' %}
    {% endif %}
{% endcall %}

{% if use_ccp %}
    [[macros.resource_registry_image('ccp-7-image', 'gcr.io/data-gpdb-public-images/ccp', 'latest')]]
{% endif %}

## ---------- Google Chat Notification ----------
{% if gchat_notification %}
    [[macros.resource_gchat_notification('gchat-alert', 'gchat-' ~ user ~ '-ci-webhook')]]
{% endif %}

## ---------- Greenplum Packages ----------
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% do x.update({'gp_num_versions': gp_num_versions[x.gp_ver]}) %}
    {% if x.gp_ver == '7' and x.os_ver == '9' %}
        {# define RPMs for rocky9 until they are released into standard locations #}
        {% include 'resources/greenplum-7-rocky9-package-tpl.yml' %}
    {% else %}
        {% include 'resources/greenplum-package-tpl.yml' %}
    {% endif %}
{% endcall %}

## ---------- PXF Artifacts ----------
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% include 'resources/pxf-artifact-tpl.yml' %}
{% endcall %}

## ---------- PXF 5 Artifact ---------------
{% if multinode_el7 %}
    [[macros.resource_pxf5_gp6_el7_artifact()]]
{% endif %}

## ---------- Auxiliary Resources ----------
{% if use_ccp %}
    [[macros.resource_terraform('gpdb')]]
{% endif %}

{% if use_ipa %}
    [[macros.resource_terraform('ipa-hadoop')]]
{% endif %}

## ======================================================================
## JOBS
## ======================================================================
jobs:

## ---------- Build and Basic single node Test Swimlanes ----------
{# include a build job for all OS other than OEL (which does not have a separate build job) #}
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% if x.test_os != 'oel' %}
        {% include 'jobs/build-tpl.yml' %}
    {% endif %}
{% endcall %}

{# include a non-FDW test job for all OS other than OEL (unless requested in the Makefile) #}
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% if x.test_os != 'oel' or oel7 %}
        {% do x.update({'use_fdw': 'false'}) %}
        {% do x.update({'use_impers': default_impers}) %}
        {% do x.update({'target': default_distro}) %}
        {% do x.update({'distro': default_distro}) %}
        {% include 'jobs/test-tpl.yml' %}
    {% endif %}
{% endcall %}

{# include an FDW test job if supported by the swimlane #}
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% if x.test_fdw is sameas true %}
        {% do x.update({'use_fdw': 'true'}) %}
        {% do x.update({'use_impers': default_impers}) %}
        {% do x.update({'target': default_distro}) %}
        {% do x.update({'distro': default_distro}) %}
        {% include 'jobs/test-tpl.yml' %}
    {% endif %}
{% endcall %}

## ---------- Extended Feature (clouds, distros, jdk) tests ----------
{# include a non-FDW test job for all clouds if supported and requested in the Makefile #}
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {# iterate over features defined for the given swimlane #}
    {% for test_feature in x.test_features %}
        {# if the given feature is requested by the Makefile, create a non-FDW job for it #}
        {% if requested_features[test_feature] %}
            {% do x.update({'use_fdw': 'false'}) %}

            {# if the purpose of the test is to try a different distro/cloud, use it, otherwise use a default distro for the job name #}
            {% set target = test_feature if (test_feature in distros or test_feature in clouds) else default_distro %}
            {% do x.update({'target': target}) %}

            {# set the distro to use for the test job's single cluster, use default if the feature are not a distro #}
            {% set distro = test_feature if test_feature in distros else default_distro %}
            {% do x.update({'distro': distro}) %}

            {# request a no-impers job for clouds and the default distro (as basic test job is default distro with impersonation) #}
            {% set use_impers = 'false' if (test_feature in clouds or test_feature == default_distro) else 'true' %}
            {% do x.update({'use_impers': use_impers}) %}

            {# define a protocol if the feature is a cloud test #}
            {% set protocol = test_feature if test_feature in clouds else '' %}
            {% do x.update({'protocol': protocol}) %}

            {# define a feature name to go into the test job name, unless it is a test against a distro/cloud only #}
            {% set feature = test_feature if test_feature not in distros and test_feature not in clouds else '' %}
            {% do x.update({'feature': feature}) %}
            {% include 'jobs/test-tpl.yml' %}

            {# for S3 only, also include an additional impersonation job #}
            {% if test_feature == 's3' %}
                {% do x.update({'use_impers': 'true'}) %}
                {% include 'jobs/test-tpl.yml' %}
            {% endif %}

        {% endif %}
    {% endfor %}
{% endcall %}

## ---------- FILE tests -----------------
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% if x.test_file is sameas true and file %}
        {% do x.update({'distro': default_distro}) %}
        {% include 'jobs/test-file-tpl.yml' %}
    {% endif %}
{% endcall %}

## ---------- GP7 PXF CLI tests ----------
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {# for now Makefile only defines the switch for GP7 #}
    {% if x.test_cli is sameas true and x.gp_ver == '7' and gp7_cli %}
        {% include 'jobs/test-cli-tpl.yml' %}
    {% endif %}
{% endcall %}

## ---------- Multi-node tests ----------
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% if x.test_multi is sameas true and requested_multi[x.os_ver] %}
        {% do x.update({'use_fdw': 'false'}) %}
        {% do x.update({'use_impers': 'true'}) %}
        {% do x.update({'target': default_distro}) %}
        {% do x.update({'distro': default_distro}) %}
        {# include upgrade task when running on centos7 only #}
        {% set with_upgrade = 'true' if x.test_platform == 'centos7' else 'false' %}
        {% do x.update({'with_upgrade': with_upgrade}) %}
        {% include 'jobs/test-multinode-tpl.yml' %}
    {% endif %}
    {# multinode no impersonation job for now will only be for GP6 and Centos7 #}
    {% if x.test_multi is sameas true and multinode_no_impersonation and x.gp_ver == '6' and x.test_platform == 'centos7' %}
        {% do x.update({'use_fdw': 'false'}) %}
        {% do x.update({'use_impers': 'false'}) %}
        {% do x.update({'target': default_distro}) %}
        {% do x.update({'distro': default_distro}) %}
        {% do x.update({'with_upgrade': 'false'}) %}
        {% include 'jobs/test-multinode-tpl.yml' %}
    {% endif %}
{% endcall %}
