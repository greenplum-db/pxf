---
# yamllint disable rule:empty-lines

{# import macros to use in this template #}
{% import "macros/macros.j2" as macros %}

{# define supported test features (single-cluster test jobs) and whether their testing is requested by the Makefile via context variables #}
{% set requested_features = {'s3': s3, 'gs': gs, 'adl': adl, 'wasbs': wasbs, 'minio': minio, 'hdp2': hdp2, 'hdp3': hdp3, 'cdh': cdh, 'jdk11': jdk11} %}
{% set supported_features = requested_features.keys()|list %}

{# define whether multinode testing is requested for given EL OS versions #}
{% set requested_multi = {'7': multinode, '8': multinode_el8, '9': multinode_el9} %}

{#
# ======================================================================
# BUILD and TEST Combinations for PXF
# ======================================================================

# gp_ver        : major Greenplum version
# build_os      : the name of the OS used to build PXF artifacts
# test_os       : the name of the OS used to test  PXF artifacts
# os_ver        : the version of the OS
# test_fdw      : whether to test PXF FDW extension in this configuration
# test_file     : whether to test PXF with FILE protocol in this configuration
# test_cli      : whether to test PXF CLI functionality in this configuration
# test_multi    : whether to test PXF against multi-node Hadoop clusters in this configuration
# test_features : an array of features to test PXF with in this configuration
#
# when iterating over the entries, use the following pattern:
# {% call(x) macros.for_each_config(build_test_pxf_combinations) %}
#     <do whatever rendering you need for a combination, can use {% include '.../some-template.yml' %} >
# {% endcall %}
#}

{% set build_test_pxf_combinations = [
    {'gp_ver': '5', 'build_os': 'centos', 'test_os': 'centos', 'os_ver': '7',     'test_fdw': false, 'test_file': false, 'test_cli': false, 'test_multi': false, 'test_features': []},
    {'gp_ver': '6', 'build_os': 'centos', 'test_os': 'centos', 'os_ver': '7',     'test_fdw': false, 'test_file': true , 'test_cli': false, 'test_multi': true , 'test_features': supported_features},
    {'gp_ver': '6', 'build_os': 'rocky' , 'test_os': 'rocky' , 'os_ver': '8',     'test_fdw': true , 'test_file': false, 'test_cli': false, 'test_multi': false, 'test_features': []},
    {'gp_ver': '6', 'build_os': 'rocky' , 'test_os': 'rocky' , 'os_ver': '9',     'test_fdw': false, 'test_file': false, 'test_cli': false, 'test_multi': true , 'test_features': []},
    {'gp_ver': '6', 'build_os': 'centos', 'test_os': 'oel'   , 'os_ver': '7',     'test_fdw': false, 'test_file': false, 'test_cli': false, 'test_multi': false, 'test_features': []},
    {'gp_ver': '6', 'build_os': 'ubuntu', 'test_os': 'ubuntu', 'os_ver': '18.04', 'test_fdw': false, 'test_file': false, 'test_cli': false, 'test_multi': false, 'test_features': []},
    {'gp_ver': '7', 'build_os': 'rocky' , 'test_os': 'rocky' , 'os_ver': '8',     'test_fdw': true , 'test_file': false, 'test_cli': true , 'test_multi': true , 'test_features': []},
    {'gp_ver': '7', 'build_os': 'rocky' , 'test_os': 'rocky' , 'os_ver': '9',     'test_fdw': false, 'test_file': false, 'test_cli': false, 'test_multi': false, 'test_features': []}] %}


{# define supported clouds that have their own 'protocols' #}
{% set clouds = ['s3', 'gs', 'adl', 'wasbs', 'minio'] %}

{# define distros we use for singlecluster setup #}
{% set distros = ['hdp2', 'hdp3', 'cdh'] %}

{# define default distro and impersonation for all test jobs #}
{% set default_distro = 'hdp2' %}
{% set default_impers = 'true' %}

{# define whether CCP should be used #}
{% set use_ccp = multinode or multinode_el8 or multinode_el9 or multinode_no_impersonation or file or gp7_cli %}

{# define whether IPA should be used #}
{% set use_ipa = multinode or multinode_el8 or multinode_el9 %}

## ======================================================================
## ANCHORS
## ======================================================================
anchors:
  [[macros.anchor_destroy_dataproc(1)]]
  [[macros.anchor_destroy_dataproc(2)]]
  [[macros.anchor_destroy_cluster('gpdb')]]
  [[macros.anchor_destroy_cluster('hadoop')]]
  [[macros.anchor_slack_notification(slack_notification)]]

## ======================================================================
## RESOURCE TYPES
## ======================================================================
resource_types:

{% if use_ccp %}
    [[macros.resource_type_registry_image('terraform', 'gcr.io/data-gpdb-ud/terraform-resource', '0.11.15')]]
{% endif %}

{% if use_ipa %}
    [[macros.resource_type_registry_image('terraform-0.14.10', 'ljfranklin/terraform-resource', '0.14.10')]]
{% endif %}

[[macros.resource_type_registry_image('gcs', 'frodenas/gcs-resource', '')]]

{% if slack_notification %}
    [[macros.resource_type_registry_image('slack-notification', 'cfcommunity/slack-notification-resource', 'latest')]]
{% endif %}

## ======================================================================
## RESOURCES
## ======================================================================
resources:
  [[macros.resource_pxf_dependencies('build')]]
  [[macros.resource_pxf_dependencies('automation')]]

  [[macros.resource_singlecluster('hdp2')]]

{% if hdp3 %}
  [[macros.resource_singlecluster('hdp3')]]
{% endif %}

{% if cdh %}
  [[macros.resource_singlecluster('cdh')]]
{% endif %}

## ---------- Github Repos ----------
  [[macros.resource_github_repo('pxf')]]

{% if use_ccp %}
  [[macros.resource_github_repo('ccp')]]
{% endif %}

## ---------- Docker Images ----------
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% include 'resources/pxf-test-image-tpl.yml' %}
{% endcall %}

{% if use_ccp %}
  [[macros.resource_registry_image('ccp-7-image', 'gcr.io/data-gpdb-public-images/ccp', 'latest')]]
{% endif %}

## ---------- Slack Notification ----------
{% if slack_notification %}
  [[macros.resource_slack_notification('ud-pipeline-bot-' ~ user ~ '-webhook')]]
{% endif %}

## ---------- Greenplum Packages ----------
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% if x.os_ver == '9' %}
        {# define RPMs for rocky9 until they are released into standard locations #}
        {% include 'resources/greenplum-rocky9-package-tpl.yml' %}
    {% else %}
        {% include 'resources/greenplum-package-tpl.yml' %}
    {% endif %}
{% endcall %}

## ---------- PXF Artifacts ----------
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% include 'resources/pxf-artifact-tpl.yml' %}
{% endcall %}

## ---------- PXF 5 Artifact ---------------
{% if multinode %}
[[macros.resource_pxf5_gp6_el7_artifact()]]
{% endif %}

## ---------- Auxiliary Resources ----------
{% if use_ccp %}
[[macros.resource_terraform('terraform', false)]]
{% endif %}

{% if use_ipa %}
[[macros.resource_terraform('terraform-ipa-hadoop', true)]]
{% endif %}

## ======================================================================
## JOBS
## ======================================================================
jobs:

## ---------- Build and Basic single node Test Swimlanes ----------

{# include a build job for all OS other than OEL (which does not have a separate build job) #}
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% if x.test_os != 'oel' %}
        {% include 'jobs/build-tpl.yml' %}
    {% endif %}
{% endcall %}

{# include a non-FDW test job for all OS other than OEL (unless requested in the Makefile) #}
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% if x.test_os != 'oel' or oel7 %}
        {% do x.update({'use_fdw': 'false'}) %}
        {% do x.update({'use_impers': default_impers}) %}
        {% do x.update({'target': default_distro}) %}
        {% do x.update({'distro': default_distro}) %}
        {% include 'jobs/test-tpl.yml' %}
    {% endif %}
{% endcall %}

{# include an FDW test job if supported by the swimlane #}
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% if x.test_fdw is sameas true %}
        {% do x.update({'use_fdw': 'true'}) %}
        {% do x.update({'use_impers': default_impers}) %}
        {% do x.update({'target': default_distro}) %}
        {% do x.update({'distro': default_distro}) %}
        {% include 'jobs/test-tpl.yml' %}
    {% endif %}
{% endcall %}

## ---------- Extended Feature (clouds, distros, jdk) tests ----------

{# include a non-FDW test job for all clouds if supported and requested in the Makefile #}
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {# iterate over features defined for the given swimlane #}
    {% for test_feature in x.test_features %}
        {# if the given feature is requested by the Makefile, create a non-FDW job for it #}
        {% if requested_features[test_feature] %}
            {% do x.update({'use_fdw': 'false'}) %}

            {# if the purpose of the test is to try a different distro/cloud, use it, otherwise use a default distro for the job name #}
            {% set target = test_feature if (test_feature in distros or test_feature in clouds) else default_distro %}
            {% do x.update({'target': target}) %}

            {# set the distro to use for the test job's single cluster, use default if the feature are not a distro #}
            {% set distro = test_feature if test_feature in distros else default_distro %}
            {% do x.update({'distro': distro}) %}

            {# request a no-impers job for clouds and the default distro (as basic test job is default distro with impersonation) #}
            {% set use_impers = 'false' if (test_feature in clouds or test_feature == default_distro) else 'true' %}
            {% do x.update({'use_impers': use_impers}) %}

            {# define a protocol if the feature is a cloud test #}
            {% set protocol = test_feature if test_feature in clouds else '' %}
            {% do x.update({'protocol': protocol}) %}

            {# define a feature name to go into the test job name, unless it is a test against a distro/cloud only #}
            {% set feature = test_feature if test_feature not in distros and test_feature not in clouds else '' %}
            {% do x.update({'feature': feature}) %}
            {% include 'jobs/test-tpl.yml' %}

            {# for S3 only, also include an additional impersonation job #}
            {% if test_feature == 's3' %}
                {% do x.update({'use_impers': 'true'}) %}
                {% include 'jobs/test-tpl.yml' %}
            {% endif %}

        {% endif %}
    {% endfor %}
{% endcall %}

## ---------- GP7 PXF CLI tests ----------

{# include a CLI test, for now Makefile only defines the switch for GP7 #}
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% if x.test_cli is sameas true and x.gp_ver == '7' and gp7_cli %}
        {% include 'jobs/test-cli-tpl.yml' %}
    {% endif %}
{% endcall %}

## ---------- FILE tests -----------------

{# include a FILE test #}
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% if x.test_file is sameas true and file %}
        {% include 'jobs/test-file-tpl.yml' %}
    {% endif %}
{% endcall %}

## ---------- Multi-node tests ----------
{% set gp_ver = 6 %}

{% if multinode_no_impersonation %}
- name: test-pxf-gp[[gp_ver]]-ext-hdp2-secure-multi-no-impers-centos7
  max_in_flight: 2
  plan:
  - in_parallel:
    - get: pxf_src
      resource: pxf-src
      passed: [build-pxf-gp[[gp_ver]]-centos7]
      trigger: true
    - get: pxf_tarball
      resource: pxf-gp[[gp_ver]]-tarball-el7
      passed: [build-pxf-gp[[gp_ver]]-centos7]
    - get: gpdb_package
      resource: gpdb[[gp_ver]]-el7-rpm-latest-0
      passed: [build-pxf-gp[[gp_ver]]-centos7]
    - get: gpdb[[gp_ver]]-pxf-dev-centos7-image
    - get: ccp_src
      resource: ccp-src
    - get: ccp-7-image
    - get: pxf-automation-dependencies
    - get: singlecluster
      resource: singlecluster-hdp2
  - in_parallel:
    - do:
      - put: terraform-gpdb
        resource: terraform
        params:
          action: create
          delete_on_failure: true
          generate_random_name: true
          terraform_source: ccp_src/google/
          vars:
            PLATFORM: centos7
            WITH_MIRRORS: false
            number_of_nodes: ((number_of_gpdb_nodes))
            extra_nodes: 1
            segments_per_host: 4
            instance_type: n1-standard-4
            ccp_reap_minutes: 120
            standby_master: false
      - task: generate-greenplum-cluster
        input_mapping:
          gpdb_rpm: gpdb_package
          terraform: terraform-gpdb
        file: ccp_src/ci/tasks/gen_cluster.yml
        image: ccp-7-image
        params:
          AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
          AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
          AWS_DEFAULT_REGION: ((ud/common/aws-region))
          BUCKET_PATH: ((tf-bucket-path))
          BUCKET_NAME: ((ud/pxf/common/tf-bucket-name))
          PLATFORM: centos7-gpdb[[gp_ver]]
          CLOUD_PROVIDER: google
          GPDB_RPM: true
      - in_parallel:
        - task: initialize-greenplum
          file: ccp_src/ci/tasks/gpinitsystem.yml
          params:
            PLATFORM: centos7-gpdb[[gp_ver]]
            POSTGRES_CONF_ADDONS:
            - wal_level=minimal
            - max_wal_senders=0
            - gp_dispatch_keepalives_idle=30
            - gp_dispatch_keepalives_interval=10
            - gp_dispatch_keepalives_count=4
        - task: install-hadoop
          file: pxf_src/concourse/tasks/install_hadoop.yml
          image: gpdb[[gp_ver]]-pxf-dev-centos7-image
          params:
            ACCESS_KEY_ID: ((tf-machine-access-key-id))
            SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
            IMPERSONATION: ((enable-impersonation-multinode))
    - task: generate-hadoop-cluster-1
      file: pxf_src/concourse/tasks/install_dataproc.yml
      params:
        GOOGLE_CREDENTIALS: ((ud/pxf/secrets/ccp-ci-service-account-key))
        GOOGLE_PROJECT_ID: ((ud/pxf/common/google-project-id))
        GOOGLE_ZONE: ((ud/pxf/common/google-zone))
        IMAGE_VERSION: ((dataproc-image-version))
        KERBEROS: ((kerberos-enabled))
        ccp_reap_minutes: 120
    - task: generate-hadoop-cluster-2
      file: pxf_src/concourse/tasks/install_dataproc.yml
      output_mapping:
        dataproc_env_files: dataproc_2_env_files
      params:
        GOOGLE_CREDENTIALS: ((ud/pxf/secrets/kerberos-ccp-ci-service-account-key))
        GOOGLE_PROJECT_ID: ((ud/pxf/common/kerberos-google-project-id))
        GOOGLE_ZONE: ((ud/pxf/common/kerberos-google-zone))
        HADOOP_USER: gpuser
        IMAGE_VERSION: ((dataproc-image-version))
        INITIALIZATION_SCRIPT: gs://data-gpdb-ud-kerberos-scripts/scripts/initialization-for-kerberos.sh
        INSTANCE_TAGS: bosh-network,data-gpdb-ud-access
        KERBEROS: ((kerberos-enabled))
        KEY: dataproc-kerberos-key
        KEYRING: dataproc-kerberos
        ccp_reap_minutes: 120
        NO_ADDRESS: false
        PROXY_USER: gpuser
        SECRETS_BUCKET: ((ud/pxf/secrets/kerberos-pxf-secrets-bucket-name))
  - task: setup-pxf
    input_mapping:
      terraform: terraform-gpdb
    file: pxf_src/concourse/tasks/install_pxf_on_ccp.yml
    image: ccp-7-image
    params:
      GOOGLE_PROJECT_ID: ((ud/pxf/common/google-project-id))
      IMPERSONATION: false
      INSTALL_GPHDFS: false
      GP_VER: [[gp_ver]]
      KERBEROS: ((kerberos-enabled))
      PXF_JVM_OPTS: ((pxf-jvm-opts))
  - task: test-pxf-gp[[gp_ver]]-ext-hdp2-secure-multi-no-impers-centos7
    image: gpdb[[gp_ver]]-pxf-dev-centos7-image
    file: pxf_src/concourse/tasks/test_pxf_on_ccp.yml
    attempts: 2
    params:
      GOOGLE_PROJECT_ID: ((ud/pxf/common/google-project-id))
      ACCESS_KEY_ID: ((tf-machine-access-key-id))
      SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
      HIVE_VERSION: 2
      IMPERSONATION: false
      KERBEROS: ((kerberos-enabled))
      GP_VER: [[gp_ver]]
      GROUP: security,multiClusterSecurity
      PXF_JVM_OPTS: ((pxf-jvm-opts))
  - task: test-pxf-cli
    on_success:
      in_parallel:
        steps:
        - *destroy_dataproc_1
        - *destroy_dataproc_2
        - *destroy_gpdb_cluster
    image: gpdb[[gp_ver]]-pxf-dev-centos7-image
    file: pxf_src/concourse/tasks/test_pxf_cli.yml
{% if slack_notification %}
    <<: *slack_alert
{% endif %}
{% endif %}

## ---------- Multi-node tests ----------
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% if x.test_multi is sameas true and requested_multi[x.os_ver] %}
        {% do x.update({'use_fdw': 'false'}) %}
        {% do x.update({'target': default_distro}) %}
        {% do x.update({'distro': default_distro}) %}

        {# include upgrade task when running on centos7 only #}
        {% set with_upgrade = 'true' if x.test_platform == 'centos7' else 'false' %}
        {% do x.update({'with_upgrade': with_upgrade}) %}

        {% include 'jobs/test-multinode-tpl.yml' %}
    {% endif %}
{% endcall %}
