---
# yamllint disable rule:empty-lines

{# import macros to use in this template #}
{% import "macros/macros.j2" as macros %}

{% set job_names = namespace(basic_tests=[], extended_tests=[], backward_compatibility=[], all=[], resources={}) %}

{# define supported test features (single-cluster test jobs) and whether their testing is requested by the Makefile via context variables #}
{% set requested_features = {'s3': s3, 'gs': gs, 'adl': adl, 'wasbs': wasbs, 'minio': minio, 'hdp2': hdp2, 'hdp3': hdp3, 'cdh': cdh, 'jdk11': jdk11} %}
{% set supported_features = requested_features.keys()|list %}

{#
# ======================================================================
# BUILD and TEST Combinations for PXF
# ======================================================================

# gp_ver     : major Greenplum version
# build_os   : the name of the OS used to build PXF artifacts
# test_os    : the name of the OS used to test  PXF artifacts
# os_ver     : the version of the OS
# test_fdw   : whether to test PXF FDW extension in this configuration
# test_cloud : whether to test PXF against cloud external systems
#
# when iterating over the entries, use the following pattern:
# {% call(x) macros.for_each_config(build_test_pxf_combinations) %}
#     <do whatever rendering you need for a combination, can use {% include '.../some-template.yml' %} >
# {% endcall %}
#}

{% set build_test_pxf_combinations = [
    {'gp_ver': '5', 'build_os': 'centos', 'test_os': 'centos', 'os_ver': '7',     'test_fdw': false, 'test_file': false, 'test_cli': false, 'test_multi': false, 'test_features': []},
    {'gp_ver': '6', 'build_os': 'centos', 'test_os': 'centos', 'os_ver': '7',     'test_fdw': false, 'test_file': true , 'test_cli': false, 'test_multi': true , 'test_features': supported_features},
    {'gp_ver': '6', 'build_os': 'rocky' , 'test_os': 'rocky' , 'os_ver': '8',     'test_fdw': true , 'test_file': false, 'test_cli': false, 'test_multi': false, 'test_features': []},
    {'gp_ver': '6', 'build_os': 'centos', 'test_os': 'oel'   , 'os_ver': '7',     'test_fdw': false, 'test_file': false, 'test_cli': false, 'test_multi': false, 'test_features': []},
    {'gp_ver': '6', 'build_os': 'ubuntu', 'test_os': 'ubuntu', 'os_ver': '18.04', 'test_fdw': false, 'test_file': false, 'test_cli': false, 'test_multi': false, 'test_features': []},
    {'gp_ver': '7', 'build_os': 'rocky' , 'test_os': 'rocky' , 'os_ver': '8',     'test_fdw': true , 'test_file': false, 'test_cli': true , 'test_multi': true , 'test_features': []}] %}


{# define supported clouds that have their own 'protocols' #}
{% set clouds = ['s3', 'gs', 'adl', 'wasbs', 'minio'] %}

{# define distros we use for singlecluster setup #}
{% set distros = ['hdp2', 'hdp3', 'cdh'] %}

{# define default distro and impersonation for all test jobs #}
{% set default_distro = 'hdp2' %}
{% set default_impers = 'true' %}

{# define whether CCP should be used #}
{% set use_ccp = true %}

{# define whether IPA should be used #}
{% set use_ipa = true %}

{# change num_gpdb5_versions & num_gpdb6_versions in Makefile to download/test more Greenplum versions #}

[[macros.reset_passed_jobs(build_test_pxf_combinations, job_names)]]

## ======================================================================
## ANCHORS
## ======================================================================
anchors:
  [[macros.anchor_destroy_dataproc(1)]]
  [[macros.anchor_destroy_dataproc(2)]]
  [[macros.anchor_destroy_cluster('gpdb')]]
  [[macros.anchor_destroy_cluster('hadoop')]]
  [[macros.anchor_slack_notification(slack_notification)]]

## ======================================================================
## RESOURCE TYPES
## ======================================================================
resource_types:
  [[macros.resource_type_registry_image('terraform', 'gcr.io/data-gpdb-ud/terraform-resource', '0.11.15')]]
  [[macros.resource_type_registry_image('terraform-0.14.10', 'ljfranklin/terraform-resource', '0.14.10')]]
  [[macros.resource_type_registry_image('gcs', 'frodenas/gcs-resource', '')]]
  [[macros.resource_type_registry_image('slack-notification', 'cfcommunity/slack-notification-resource', 'latest')]]

## ======================================================================
## RESOURCES
## ======================================================================
resources:
  [[macros.resource_pxf_dependencies('build')]]
  [[macros.resource_pxf_dependencies('automation')]]

## ---------- Single Cluster tarballs ----------
  [[macros.resource_singlecluster('hdp2')]]
  [[macros.resource_singlecluster('hdp3')]]
  [[macros.resource_singlecluster('cdh')]]

## ---------- Github Repos ----------
  [[macros.resource_github_repo('pxf')]]
  [[macros.resource_github_repo('ccp')]]

## ---------- RelEng Drop Artifacts ----------
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% include 'resources/release-artifact-tpl.yml' %}
{% endcall %}

{% call(x) macros.for_supported_gp_vers(build_test_pxf_combinations) %}
    {% include 'resources/releng-osl-odp-tpl.yml' %}
{% endcall %}

## ---------- RelEng Drop Artifacts for tarballs ----------
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% include 'resources/release-tarball-artifact-tpl.yml' %}
{% endcall %}

## ---------- PXF ShipIt resources ----------
[[macros.shipit_file(environment)]]

## ---------- Docker Images ----------
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% include 'resources/pxf-test-image-tpl.yml' %}
{% endcall %}

  [[macros.resource_registry_image('rpmrebuild-centos7-image', 'gcr.io/data-gpdb-ud/rpmrebuild-centos7', 'latest')]]
  [[macros.resource_registry_image('rpmrebuild-rocky8-image', 'gcr.io/data-gpdb-ud/rpmrebuild-rocky8', 'latest')]]

  [[macros.resource_registry_image('ccp-7-image', 'gcr.io/data-gpdb-public-images/ccp', 'latest')]]

  [[macros.resource_registry_image('google-cloud-sdk-slim-image', 'google/cloud-sdk', '402.0.0-slim')]]

## ---------- Slack Notification ----------
{% if slack_notification %}
  [[macros.resource_slack_notification('slack-alert', 'ud-pipeline-bot-dev-webhook')]]
  [[macros.resource_slack_notification('notify-releng', 'ud-pipeline-bot-gp-releng-webhook')]]
{% endif %}

## ---------- Greenplum Packages ----------
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% if x.gp_ver == '5' %}
        {% set num_versions = num_gpdb5_versions | int %}
    {% elif x.gp_ver == '6' %}
        {% set num_versions = num_gpdb6_versions | int %}
    {% else %}
        {% set num_versions = 1 %}
    {% endif %}
    {% do x.update({'num_versions': num_versions}) %}

      {% include 'resources/greenplum-package-tpl.yml' %}
{% endcall %}

## ---------- PXF 5 (for GPDB 6) Artifact ---------------
  [[macros.resource_pxf5_gp6_el7_artifact()]]

## ---------- PXF 6.6 (for GPDB 6) Artifact ---------------
# This is for extension upgrade testing. PXF 6.6.X contains extension version 2.0. PXF 6.7.+ contains version 2.1
  [[macros.resource_pxf6_6_gp6_el7_artifact()]]

## ---------- PXF Build Artifacts ----------
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% include 'resources/pxf-artifact-tpl.yml' %}
{% endcall %}

## ---------- Auxiliary Resources ----------
  [[macros.resource_terraform('terraform', false)]]
  [[macros.resource_terraform('terraform-ipa-hadoop', true)]]

## ======================================================================
## JOBS
## ======================================================================
jobs:

## ---------- Build and Basic Singlenode Test Swimlanes ----------
{# include a build job for all OS other than OEL (which does not have a separate build job) #}
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% if x.test_os != 'oel' %}
        {% include 'jobs/build-tpl.yml' %}
        {% set job_names.all = job_names.all + [x.job_name] %}
    {% endif %}
{% endcall %}

{# include a non-FDW test job for all OS #}
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% do x.update({'use_fdw': 'false'}) %}
    {% do x.update({'use_impers': default_impers}) %}
    {% do x.update({'target': default_distro}) %}
    {% do x.update({'distro': default_distro}) %}
    {% include 'jobs/test-tpl.yml' %}
    {% set job_names.all = job_names.all + [x.job_name] %}
    {% set job_names.basic_tests = job_names.basic_tests + [x.job_name] %}
{% endcall %}

{# include an FDW test job if supported by the swimlane #}
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% if x.test_fdw is sameas true %}
        {% do x.update({'use_fdw': 'true'}) %}
        {% do x.update({'use_impers': default_impers}) %}
        {% do x.update({'target': default_distro}) %}
        {% do x.update({'distro': default_distro}) %}
        {% include 'jobs/test-tpl.yml' %}
        {% set job_names.all = job_names.all + [x.job_name] %}
        {% set job_names.basic_tests = job_names.basic_tests + [x.job_name] %}
    {% endif %}
{% endcall %}

## ---------- Testing Gate ----------
{% include 'jobs/testing-gate-tpl.yml' %}

[[macros.reset_passed_jobs(build_test_pxf_combinations, job_names)]]

## ---------- Extended Feature (clouds, distros, jdk) tests ----------
{# include a non-FDW test job for all clouds if supported #}
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% do x.update({ 'passed': '[testing-gate-for-pxf-gp]' }) %}
    {# iterate over features defined for the given swimlane #}
    {% for test_feature in x.test_features %}
        {% do x.update({'use_fdw': 'false'}) %}

        {# if the purpose of the test is to try a different distro/cloud, use it, otherwise use a default distro for the job name #}
        {% set target = test_feature if (test_feature in distros or test_feature in clouds) else default_distro %}
        {% do x.update({'target': target}) %}

        {# set the distro to use for the test job's single cluster, use default if the feature are not a distro #}
        {% set distro = test_feature if test_feature in distros else default_distro %}
        {% do x.update({'distro': distro}) %}

        {# request a no-impers job for clouds and the default distro (as basic test job is default distro with impersonation) #}
        {% set use_impers = 'false' if (test_feature in clouds or test_feature == default_distro) else 'true' %}
        {% do x.update({'use_impers': use_impers}) %}

        {# define a protocol if the feature is a cloud test #}
        {% do x.update({'protocol': test_feature}) if test_feature in clouds else x.update({'protocol': ''})  %}

        {# define a feature name to go into the test job name, unless it is a test against a distro/cloud only #}
        {% do x.update({'feature': test_feature}) if test_feature not in distros and test_feature not in clouds %}
        {% include 'jobs/test-tpl.yml' %}
        {% set job_names.all = job_names.all + [x.job_name] %}
        {% set job_names.extended_tests = job_names.extended_tests + [x.job_name] %}

        {# for S3 only, also include an additional impersonation job #}
        {% if test_feature == 's3' %}
            {% do x.update({'use_impers': 'true'}) %}
            {% include 'jobs/test-tpl.yml' %}
            {% set job_names.all = job_names.all + [x.job_name] %}
            {% set job_names.extended_tests = job_names.extended_tests + [x.job_name] %}
        {% endif %}
    {% endfor %}
{% endcall %}

## ---------- Upgrade Extension Test ----------
{% set gp_ver = '6' %}
    {% include 'jobs/test-upgrade-extension-tpl.yml' %}
    {% set job_names.extended_tests = job_names.extended_tests + ['test-pxf-gp' ~ gp_ver ~ '-ext-hdp2-upgrade-extension-centos7'] %}
    {% set job_names.all = job_names.all + ['test-pxf-gp' ~ gp_ver ~ '-ext-hdp2-upgrade-extension-centos7'] %}
    {% do job_names.resources.update({'pxf-gp' ~ gp_ver ~ '-tarball-centos7': job_names.resources['pxf-gp' ~ gp_ver ~ '-tarball-centos7'] + ['test-pxf-gp' ~ gp_ver ~ '-ext-hdp2-upgrade-extension-centos7']}) %}

## ---------- FILE tests -----------------
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% if x.test_file is sameas true %}
        {% do x.update({'passed': '[testing-gate-for-pxf-gp]'}) %}
        {% include 'jobs/test-file-tpl.yml' %}
        {% set job_names.all = job_names.all + [x.job_name] %}
        {% set job_names.extended_tests = job_names.extended_tests + [x.job_name] %}
    {% endif %}
{% endcall %}

## ---------- GP7 PXF CLI tests ----------
{# include a CLI test, for now Makefile only defines the switch for GP7 #}
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
  {% if x.test_cli %}
  {% do x.update({'passed': '[testing-gate-for-pxf-gp]'}) %}
        {% include 'jobs/test-cli-tpl.yml' %}
        {% set job_names.all = job_names.all + [x.job_name] %}
        {% set job_names.extended_tests = job_names.extended_tests + [x.job_name] %}
    {% endif %}
{% endcall %}

## ---------- Multi-node tests ----------
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% if x.test_multi is sameas true %}
        {% do x.update({'use_fdw': 'false'}) %}
        {% do x.update({'use_impers': 'true'}) %}
        {% do x.update({'target': default_distro}) %}
        {% do x.update({'distro': default_distro}) %}

        {# include upgrade task when running on centos7 only #}
        {% set with_upgrade = 'true' if x.test_platform == 'centos7' else 'false' %}
        {% do x.update({'with_upgrade': with_upgrade}) %}

        {% do x.update({'passed': '[testing-gate-for-pxf-gp]'}) %}
        {% include 'jobs/test-multinode-tpl.yml' %}
        {% set job_names.all = job_names.all + [x.job_name] %}
        {% set job_names.extended_tests = job_names.extended_tests + [x.job_name] %}
    {% endif %}
    {# multinode no impersonation job for now will only be for GP6 and Centos7 #}
    {% if x.test_multi is sameas true and x.gp_ver == '6' and x.test_platform == 'centos7' %}
        {% do x.update({'use_fdw': 'false'}) %}
        {% do x.update({'use_impers': 'false'}) %}
        {% do x.update({'target': default_distro}) %}
        {% do x.update({'distro': default_distro}) %}
        {% do x.update({'with_upgrade': 'false'}) %}
        {% include 'jobs/test-multinode-tpl.yml' %}
        {% set job_names.all = job_names.all + [x.job_name] %}
        {% set job_names.extended_tests = job_names.extended_tests + [x.job_name] %}
    {% endif %}
{% endcall %}

## ---------- Compatibility Gate ----------
{% include 'jobs/compatibility-gate-tpl.yml' %}

[[macros.reset_passed_jobs(build_test_pxf_combinations, job_names)]]

## ---------- Compatibility Testing ----------
{% call(x) macros.for_each_config(build_test_pxf_combinations) %}
    {% if x.gp_ver == '5' %}
        {% set num_versions = num_gpdb5_versions | int %}
    {% elif x.gp_ver == '6' %}
        {% set num_versions = num_gpdb6_versions | int %}
    {% else %}
        {% set num_versions = 1 %}
    {% endif %}
    {% do x.update({'num_versions': num_versions}) %}
    {# number of backwards compatibility tasks that can run at once #}
    {% do x.update({'max_concurrent_bc_tasks': 3}) %}
    {% if x.test_os != 'oel' %}
        {% include 'jobs/test-backward-compatibility-tpl.yml' %}
        {% set job_names.all = job_names.all + [x.job_name] %}
        {% set job_names.backward_compatibility = job_names.backward_compatibility + [x.job_name] %}
    {% endif %}
{% endcall %}

## ---------- Artifact Promotion Gate ----------
{% include 'jobs/promote-pxf-artifacts-tpl.yml' %}

{% include 'jobs/publish-pxf-artifacts-to-releng-tpl.yml' %}

## ======================================================================
## GROUPS
## ======================================================================
groups:
- name: all
  jobs:
    [[job_names.all]]

[[macros.job_group('centos7', job_names.all)]]
[[macros.job_group('oel7', job_names.all)]]
[[macros.job_group('rocky8', job_names.all)]]
[[macros.job_group('ubuntu18.04', job_names.all)]]

[[macros.job_group('gp5', job_names.all)]]
[[macros.job_group('gp6', job_names.all)]]
[[macros.job_group('gp7', job_names.all)]]

[[macros.job_group('backward-compatibility', job_names.all)]]

- name: promote-and-publish
  jobs:
  - promote-pxf-for-gp5-gp6-gp7-artifacts
  - publish-pxf-gp5-gp6-gp7-artifacts-to-gp-releng