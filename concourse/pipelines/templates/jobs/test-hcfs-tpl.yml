{# Template for a PXF HCFS test job definition.
 #
 # Expects a dictionary with the name 'x' to be set as defined in macros.j2 file and these additional fields:
 #
 # x.use_fdw     - whether to use FDW extension for testing (otherwise the external table extension will be used)
 # x.use_impers  - whether to use PXF impersonation in the job setup
 # x.protocol    - cloud protocol to use (s3, gs, adl, wasbs, minio)
 #}

{% if x.use_fdw == 'true' %}
    {% set extension = 'fdw' %}
{% else %}
    {% set extension = 'ext' %}
{% endif %}

{% set impers_suffix = '' %}
{% if x.use_impers == 'false' %}
    {% set impers_suffix = '-no-impers' %}
{% endif %}

{% set extra_test_group = '' %}
{% if x.protocol == 's3' %}
    {# for the S3 protocol only we run an extra test group #}
    {% set extra_test_group = ',s3' %}
{% endif %}

- name: test-pxf-gp[[x.gp_ver]]-[[extension]]-[[x.protocol]][[impers_suffix]]-[[x.test_platform]]
  plan:
  - in_parallel:
    - get: pxf_src
      resource: pxf-src
      passed: [build-pxf-gp[[x.gp_ver]]-[[x.build_platform]]]
      trigger: true
    - get: pxf_tarball
      resource: pxf-gp[[x.gp_ver]]-tarball-[[x.release_platform]]
      passed: [build-pxf-gp[[x.gp_ver]]-[[x.build_platform]]]
    - get: gpdb_package
      resource: gpdb[[x.gp_ver]]-[[x.release_platform]]-[[x.pkg_type]]-latest-0
      passed: [build-pxf-gp[[x.gp_ver]]-[[x.build_platform]]]
    - get: gpdb[[x.gp_ver]]-pxf-dev-[[x.test_platform]]-image
{# if the image was also used to build the artifact, add a 'passed' condition #}
{% if [[x.test_platform]] == [[x.build_platform]] %}
      passed: [build-pxf-gp[[x.gp_ver]]-[[x.build_platform]]]
{% endif %}
    - get: pxf-automation-dependencies
    - get: singlecluster
      resource: singlecluster-hdp2
  - task: test-pxf-gp[[x.gp_ver]]-[[extension]]-[[x.protocol]][[impers_suffix]]-[[x.test_platform]]
    file: pxf_src/concourse/tasks/test.yml
    image: gpdb[[x.gp_ver]]-pxf-dev-[[x.test_platform]]-image
    params:
      GP_VER: [[x.gp_ver]]
      GROUP: hcfs[[extra_test_group]]
      IMPERSONATION: [[x.use_impers]]
      PROTOCOL: [[x.protocol]]
{% if x.test_os == 'ubuntu' %}
      PXF_BASE_DIR: /home/gpadmin/pxf
{% endif %}
      USE_FDW: [[x.use_fdw]]
{# include credential for external clouds #}
{% if x.protocol == 's3' %}
      ACCESS_KEY_ID: ((tf-machine-access-key-id))
      SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
{% elif x.protocol == 'adl' %}
      ADL_ACCOUNT: ((ud/pxf/common/adl-account))
      ADL_CLIENT_ID: ((ud/pxf/secrets/adl-client-id))
      ADL_CREDENTIAL: ((ud/pxf/secrets/adl-credential))
      ADL_REFRESH_URL: ((ud/pxf/common/adl-refresh-url))
{% elif x.protocol == 'wasbs' %}
      WASB_ACCOUNT_NAME: ((ud/pxf/common/wasb-account-name))
      WASB_ACCOUNT_KEY: ((ud/pxf/secrets/wasb-account-key))
{% elif x.protocol == 'gs' %}
      GOOGLE_CREDENTIALS: ((ud/pxf/secrets/gsc-ci-service-account-key))
{% endif %}
{% if slack_notification %}
    <<: *slack_alert
{% endif %}
