{# Template for a PXF file protocol test job definition.
 #
 # Expects a dictionary with the name 'x' to be set as defined in macros.j2 file and these additional fields:
 #
 # x.passed - an array of upstream job names that the artifacts need to pass before this job (optional)
#}

{# if x.passed was not provided, make it a build job on the same platform #}
{% set passed = x.passed if x.passed else '[build-pxf-gp' ~ x.gp_ver ~ '-' ~ x.build_platform ~ ']' %}

{% do x.update({'job_name': 'test-pxf-gp' ~ x.gp_ver ~ '-ext-file-no-impers-' ~ x.test_platform}) %}
- name: [[x.job_name]]
  max_in_flight: 2
  plan:
  - in_parallel:
    - get: pxf_src
      resource: pxf-src
      passed: [[passed]]
      trigger: true
    - get: pxf_tarball
      resource: pxf-gp[[x.gp_ver]]-tarball-[[x.release_platform]]
      passed: [[passed]]
    - get: gpdb_package
      resource: gpdb[[x.gp_ver]]-[[x.release_platform]]-rpm-latest-0
      passed: [[passed]]
    - get: gpdb[[x.gp_ver]]-pxf-dev-[[x.test_platform]]-image
      passed: [[passed]]
    - get: ccp_src
      resource: ccp-src
    - get: ccp-7-image
    - get: pxf-automation-dependencies
    - get: singlecluster
      resource: singlecluster-[[x.distro]]
  - put: terraform-gpdb
    params:
      action: create
      delete_on_failure: true
      generate_random_name: true
      terraform_source: ccp_src/google/
      vars:
        PLATFORM: [[x.test_platform]]
        number_of_nodes: ((number_of_gpdb_nodes))
        segments_per_host: 4
        instance_type: n1-standard-4
        ccp_reap_minutes: 60
  - task: generate-greenplum-cluster
    input_mapping:
      gpdb_rpm: gpdb_package
      terraform: terraform-gpdb
    file: ccp_src/ci/tasks/gen_cluster.yml
    image: ccp-7-image
    params:
      AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
      AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
      AWS_DEFAULT_REGION: ((ud/common/aws-region))
      BUCKET_PATH: ((tf-bucket-path))
      BUCKET_NAME: ((ud/pxf/common/tf-bucket-name))
      PLATFORM: [[x.test_platform]]
      CLOUD_PROVIDER: google
      GPDB_RPM: true
  - task: initialize-greenplum
    file: ccp_src/ci/tasks/gpinitsystem.yml
    params:
      PLATFORM: [[x.test_platform]]-gpdb[[x.gp_ver]]
  - task: setup-nfs
    input_mapping:
      terraform: terraform-gpdb
    file: pxf_src/concourse/tasks/install_nfs_on_ccp.yml
    image: ccp-7-image
    params:
      BASE_PATH: /mnt/nfs/var/nfsshare
  - task: setup-pxf
    input_mapping:
      terraform: terraform-gpdb
    file: pxf_src/concourse/tasks/install_pxf_on_ccp.yml
    image: ccp-7-image
    params:
      GOOGLE_PROJECT_ID: ((ud/pxf/common/google-project-id))
      GP_VER: [[x.gp_ver]]
      IMPERSONATION: true
      INSTALL_GPHDFS: false
      PXF_JVM_OPTS: ((pxf-jvm-opts))
      SKIP_HADOOP_SETUP: true
  - task: [[x.job_name]]
    on_success:
      <<: *destroy_gpdb_cluster
    privileged: true
    file: pxf_src/concourse/tasks/test_pxf_on_ccp.yml
    image: gpdb[[x.gp_ver]]-pxf-dev-[[x.test_platform]]-image
    params:
      GOOGLE_PROJECT_ID: ((ud/pxf/common/google-project-id))
      BASE_PATH: /mnt/nfs/var/nfsshare
      GP_VER: [[x.gp_ver]]
      GROUP: hcfs
      IMPERSONATION: false
      PROTOCOL: file
{% if slack_notification %}
    <<: *slack_alert
{% endif %}
