#!/usr/bin/env python

import argparse
import datetime
import os.path
import sys
import re

from jinja2 import Environment, FileSystemLoader

PIPELINES_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'pipelines')

TEMPLATE_ENVIRONMENT = Environment(
    autoescape = False,
    loader = FileSystemLoader(os.path.join(PIPELINES_DIR, 'templates')),
    trim_blocks = True,
    lstrip_blocks = True,
    variable_start_string = '[[',  # 'default {{ has conflict with pipeline syntax'
    variable_end_string = ']]',
    extensions = ['jinja2.ext.loopcontrols'])


class PxfParser(argparse.ArgumentParser):
    def error(self, message):
        sys.stderr.write('error: %s\n' % message)
        # self.print_help(sys.stderr)
        sys.exit(2)


def render_template(template_filename, context):
    """Render template"""
    return TEMPLATE_ENVIRONMENT.get_template(template_filename).render(context)


def create_pipeline():
    context = {}
    for i in ARGS.vars:
        k = i.split('=')[0]
        v = i.split('=')[1]
        context[k] = v
        match = re.search('^[0-9]+$', v)
        if match:
            context[k] = int(v)

    pipeline_yml = render_template(ARGS.template_filename, context)

    header = render_template('header.yml', context)
    sys.stdout.write(header + '\n')
    sys.stdout.write(pipeline_yml)

    return True

def build_parser():
    pxf_parser = PxfParser(
        description = 'Generate Concourse Pipeline yaml from template file',
        formatter_class = argparse.ArgumentDefaultsHelpFormatter)

    pxf_parser.add_argument('--vars',
                            action = 'store',
                            nargs = '+',
                            dest = 'vars',
                            help = 'any variables you want to interpolate')

    pxf_parser.add_argument('-t', '--template',
                            action='store',
                            dest='template_filename',
                            default="pxf-tpl.yml",
                            help='Name of template to use, in templates/')

    return pxf_parser

if __name__ == "__main__":
    PARSER = build_parser()
    ARGS = PARSER.parse_args()
    pipeline_created = create_pipeline()

    if not pipeline_created:
        sys.exit(1)

