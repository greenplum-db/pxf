#!/bin/bash
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

#
# pxf-service	start/stop/initialize/status the PXF instance
#

# establish PXF_HOME and global vars used by all commands
if [ -z ${PXF_HOME} ]; then
    export PXF_HOME="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"
fi
default_env_script=${PXF_HOME}/conf/pxf-env-default.sh
tomcat_root=${PXF_HOME}/apache-tomcat
tomcat_templates=${PXF_HOME}/templates/tomcat
instance_root=${PXF_HOME}
instance_name=pxf-service

curl=`which curl`

function validate_user()
{
	# make sure current user is not root
    if [ $EUID -eq 0 ]; then
        fail "Cannot run as root user"
    fi
}

function confirm_with_user()
{
	echo "*****************************************************************************"
	echo "* GP_EXTENSIONS_HOME or PXF_CONF variables are not defined, using defaults"
	echo "* Using ${PXF_CONF} for user configurations"
	echo "* WARNING: using this directory is not recommended for production deployments"
	echo "*****************************************************************************"

	read -p "Do you want to proceed? [Y]: " answer
	answer=${answer:-"Y"}
	case ${answer:0:1} in
		y|Y )
			echo "Proceeding with the initialization"
		;;
		* )
			echo "Initialization aborted"
			exit 1
		;;
	esac
}

function update_pxf_conf()
{
    if [ -z "${PXF_CONF}" ]; then
        # PXF_CONF was not specified during init command
        # check if we can fall back on GP_EXTENSIONS_HOME
        if [ ! -z "${GP_EXTENSIONS_HOME}" ]; then
			export PXF_CONF="${GP_EXTENSIONS_HOME}/pxf"
        else
			# need to default to user's home directory and ask for confirmation, unless silent mode is used
			local current_user=$( id -un )
			local pxf_user_home=$( getent passwd ${current_user} | cut -d: -f6 )
			if [ -z "${pxf_user_home}" ]; then
				fail "PXF_CONF is not set and user ${current_user} home directory is not defined"
			elif [ ! -d "${pxf_user_home}" ]; then
				fail "PXF_CONF is not set and user ${current_user} home directory ${pxf_user_home} does not exist"
			else
				export PXF_CONF="${pxf_user_home}/pxf"
				if [ "${silent}" == "false" ]; then
					confirm_with_user
				fi
			fi
		fi
    fi

	echo "Using ${PXF_CONF} as a location for user-configurable files"

    # update the value on PXF_CONF in the default env file
    sed -i -e "s|{PXF_CONF:=.*}$|{PXF_CONF:=\"${PXF_CONF}\"}|g" ${default_env_script}
}

function get_environment()
{
    # load default environment
    if [ ! -f ${default_env_script} ]; then
	    fail "Failed to find ${default_env_script}"
    fi
    source ${default_env_script}

    # validate JAVA_HOME
    if [ ! -x ${JAVA_HOME}/bin/java ]; then
        fail "\$JAVA_HOME is invalid"
    fi
}

# print error message and return with error code
function fail()
{
    echo "ERROR: $1"
    exit 1
}

#
# createInstance creates a tomcat instance and
# configures based on pre-configured template files.
#
function createInstance()
{
	mkdir -p ${instance_root}
	mkdir -p ${instance_root}/${instance_name}
	cp -r ${tomcat_root}/* ${instance_root}/${instance_name}/.

	if [ $? -gt 0 ]; then
		echo "ERROR: instance creation failed"
		return 1
	fi

    chmod 700 ${instance_root}/${instance_name}

    # copy configuration files into instance
    cp ${tomcat_templates}/bin/setenv.sh ${instance_root}/${instance_name}/bin/setenv.sh
    cp ${tomcat_templates}/conf/catalina.properties ${instance_root}/${instance_name}/conf/.
    cp ${tomcat_templates}/conf/server.xml ${instance_root}/${instance_name}/conf/.
    cp ${tomcat_templates}/conf/web.xml ${instance_root}/${instance_name}/conf/.

    return 0
}

#
# deployWebapp adds the pxf-webapp to the new instance's webapps folder
# and the custom loader to the instance's lib directory
#
function deployWebapp()
{
	cp ${PXF_HOME}/lib/pxf.war ${instance_root}/${instance_name}/webapps/ || return 1
	cp ${PXF_HOME}/lib/pxf-service-*[0-9].jar ${instance_root}/${instance_name}/lib/ || return 1

	return 0
}

#
# waitForTomcat waits for tomcat to finish loading
# for given attempts number.
#
function waitForTomcat()
{
	attempts=0
	max_attempts=$1 # number of attempts to connect
	sleep_time=1 # sleep 1 second between attempts

	# wait until tomcat is up:
	echo Checking if tomcat is up and running...
	until [[ "`curl --silent --connect-timeout 1 -I http://localhost:${PXF_PORT} | grep 'Coyote'`" != "" ]];
	do
		let attempts=attempts+1
		if [[ "$attempts" -eq "$max_attempts" ]]; then
			echo ERROR: PXF is down - tomcat is not running
			return 1
		fi
		echo "tomcat not responding, re-trying after ${sleep_time} second (attempt number ${attempts})"
		sleep ${sleep_time}
	done

	return 0
}

#
# checkWebapp checks if tomcat is up for $1 attempts and then
# verifies PXF webapp is functional
#
function checkWebapp()
{
	waitForTomcat $1 || return 1

	echo "Checking if PXF webapp is up and running..."
	curlResponse=$(${curl} -s "http://localhost:${PXF_PORT}/pxf/v0")
	expectedResponse="Wrong version v0, supported version is v[0-9]+"

	if [[ ${curlResponse} =~ $expectedResponse ]]; then
		echo PXF webapp is listening on port ${PXF_PORT}
		return 0
	fi

	echo "ERROR: PXF webapp is inaccessible but tomcat is up. Check logs for more information"
	return 1
}

# instanceExists returns 0 when the instance exists
# non zero otherwise
function instanceExists()
{
	if [ ! -d "$instance_root/$instance_name" ]; then
		return 1
	fi

	${instance_root}/${instance_name}/bin/catalina.sh version > /dev/null 2>&1
	return $?
}

#
# configureWebapp patches the webapp with pxf and user overriden configs
# applied only if PXF_HOME is defined
#
function configureWebapp()
{
    if [ -z ${PXF_HOME} ]; then
        # webapp doesn't require patch
        return 0
    fi
    pushd ${instance_root}/${instance_name}/webapps > /dev/null || return 1
    rm -rf pxf
    mkdir pxf
    cd pxf
    unzip -q ../pxf.war
    popd > /dev/null

    context_file=${instance_root}/${instance_name}/webapps/pxf/META-INF/context.xml
    sed -i -e "s:classpathFiles=\"[a-zA-Z0-9\/\;.-]*\":classpathFiles=\"${PXF_HOME}\/conf\/pxf-private.classpath\":" ${context_file}
    sed -i -e "s:secondaryClasspathFiles=\"[a-zA-Z0-9\/\;.-]*\":secondaryClasspathFiles=\"${PXF_HOME}\/conf\/pxf-public.classpath\":" ${context_file}

    web_file=${instance_root}/${instance_name}/webapps/pxf/WEB-INF/web.xml
    sed -i -e "s:<param-value>.*pxf-log4j.properties<\/param-value>:<param-value>${PXF_CONF}\/conf\/pxf-log4j.properties<\/param-value>:" ${web_file}

    # set port
    catalinaProperties=${instance_root}/${instance_name}/conf/catalina.properties
    sed -i -e "s|^[[:blank:]]*connector.http.port=.*$|connector.http.port=${PXF_PORT}|g" ${catalinaProperties}

    # set container configs
    catalinaEnv=${instance_root}/${instance_name}/bin/setenv.sh
    sed -i -e "s|JVM_OPTS=.*$|JVM_OPTS=\"${PXF_JVM_OPTS}\"|g" ${catalinaEnv}
    sed -i -e "s|-Dpxf.log.dir=[^[:space:]^\"]*|-Dpxf.log.dir=${PXF_LOGDIR} |g" ${catalinaEnv}
    sed -i -e "s|-Dpxf.service.kerberos.keytab=[^[:space:]^\"]*|-Dpxf.service.kerberos.keytab=${PXF_KEYTAB} |g" ${catalinaEnv}
    sed -i -e "s|-Dpxf.service.kerberos.principal=[^[:space:]^\"]*|-Dpxf.service.kerberos.principal=${PXF_PRINCIPAL} |g" ${catalinaEnv}
    sed -i -e "s|^[[:blank:]]*PXF_USER_IMPERSONATION=.*$|PXF_USER_IMPERSONATION=\"${PXF_USER_IMPERSONATION}\"|g" ${catalinaEnv}
    sed -i -e "s|^[[:blank:]]*CATALINA_PID=.*$|CATALINA_PID=${PXF_RUNDIR}/catalina.pid|g" ${catalinaEnv}
    sed -i -e "s|^[[:blank:]]*CATALINA_OUT=.*$|CATALINA_OUT=${PXF_LOGDIR}/catalina.out|g" ${catalinaEnv}

    # set log directories
    catalinaLog=${instance_root}/$instance_name/conf/logging.properties
    sed -i -e "s|juli.FileHandler.directory\s*=.*$|juli.FileHandler.directory = ${PXF_LOGDIR}|g" ${catalinaLog}
}

function commandWebapp()
{
    command=$1
    if [ "${PXF_DEBUG}" == "true" ] && [ "${command}" == "start" ]; then
        command="jpda $command"
    fi
    pushd ${instance_root} > /dev/null

    # Run command as a current user
    ${instance_root}/${instance_name}/bin/catalina.sh ${command}

    if [ $? -ne 0 ]; then
        return 1
    fi
    popd > /dev/null
}

function createLogsDir()
{
    # logs dir is likely outside PXF_HOME, setup only if it does not yet exist
    if [ ! -d "${PXF_LOGDIR}" ]; then
        echo "Creating PXF logs directory ${PXF_LOGDIR} ..."
        mkdir -p ${PXF_LOGDIR}
        chmod 700 ${PXF_LOGDIR}
    fi
}

function createRunDir()
{
	echo "Creating PXF runtime directory ${PXF_RUNDIR} ..."
    mkdir -p ${PXF_RUNDIR}
    chmod 700 ${PXF_RUNDIR}
}

function generatePrivateClasspath()
{
    # verify that a template file for the distribution exists
    local template_file="${PXF_HOME}/templates/pxf/pxf-private.classpath.template"
    if [ ! -f "${template_file}" ]; then
        fail "Template file ${template_file} not found"
    fi

    echo "Generating ${PXF_HOME}/conf/pxf-private.classpath file from ${template_file} ..."

    # create initial version of the file by replacing PXF_HOME and PXF_CONF tokens
    cp ${template_file} ${PXF_HOME}/conf/pxf-private.classpath
    sed -i -e "s|PXF_HOME|${PXF_HOME}|g" ${PXF_HOME}/conf/pxf-private.classpath
    sed -i -e "s|PXF_CONF|${PXF_CONF}|g" ${PXF_HOME}/conf/pxf-private.classpath
}

function generateUserConfigs()
{
    # create and setup user configuration directories (only if they do not exist)
    setup_conf_directory ${PXF_CONF}
    setup_conf_directory ${PXF_CONF}/conf ${PXF_HOME}/templates/user/conf
    setup_conf_directory ${PXF_CONF}/keytabs
    setup_conf_directory ${PXF_CONF}/logs
    setup_conf_directory ${PXF_CONF}/servers ${PXF_HOME}/templates/user/servers
}

function setup_conf_directory()
{
    local target=$1
    local source=$2

    if [ ! -d "${target}" ]; then
        if [ -z "${source}" ]; then
            echo "Creating configuration directory ${target} ..."
            mkdir -p ${target}
        else
            echo "Copying configurations from ${source} to ${target} ..."
            cp -R ${source} $( dirname ${target} )
        fi
    else
        echo "Directory ${target} already exists, no update required"
    fi
}

function printUsage()
{
    echo $"Usage: $0 {start|stop|restart|init|status} [-y]"
}

function validate_system()
{
    # validate curl
    which curl &> /dev/null
    if [ $? -ne 0 ]; then
		fail "curl is not installed, please install"
    fi

    # validate unzip
    which unzip &> /dev/null
    if [ $? -ne 0 ]; then
        fail "unzip is not installed, please install"
    fi
}

# doInit handles the init command
function doInit()
{
	instanceExists
	if [ $? -eq 0 ]; then
		echo ERROR: instance already exists in ${instance_root}, nothing to do...
		return 0
	fi

	update_pxf_conf
	get_environment
	generatePrivateClasspath || return 1
	generateUserConfigs || return 1
	createInstance || return 1
	deployWebapp || return 1
	createLogsDir || return 1
	createRunDir  || return 1

}

#
# doStart handles start command
# command is executed as the current user
#
# after start, uses checkWebapp to verify the PXF webapp was loaded
# successfully
#
function doStart()
{
	instanceExists
	if [ $? -ne 0 ]; then
		fail "can't find PXF instance, maybe call init?"
	fi
	get_environment
	configureWebapp || return 1
	commandWebapp start || return 1
	checkWebapp 300 || return 1
}

#
# doStart handles stop command
# command is executed as the current user
#
#
function doStop()
{
    instanceExists
    if [ $? -ne 0 ]; then
        fail "can't find PXF instance, maybe call init?"
    fi
	get_environment
    commandWebapp stop || return 1
}

function doStatus()
{
	get_environment
	checkWebapp 1 || return 1
}

function printUpdateConfigUsage()
{
    >&2 echo "Usage: pxf update-config -f hostfile.txt"
}

function printStartAllUsage()
{
    >&2 echo "Usage: pxf start-all -f hostfile.txt"
}

function doUpdateConfig()
{
    local hostfile
    local config_dir="$PXF_USER_HOME/conf"
#    export PXF_USER_HOME=/home/gpadmin/foobar/pxf # TODO: remove this

    shift # don't try to parse the update-config arg
    if [ "$#" -eq 0 ]; then
        >&2 echo 'update-config requires arguments'
        printUpdateConfigUsage
        return 1
    fi

    while getopts ':f:' opt; do
        case "${opt}" in
            f )
                hostfile="$2"
                ;;
            \? )
                >&2 echo "Unrecognized option: -$OPTARG"
                printUpdateConfigUsage
                return 1
                ;;
            : )
                >&2 echo "Invalid option: -$OPTARG requires an argument"
                printUpdateConfigUsage
                return 1
                ;;
        esac
    done

    if [ ! -e "$hostfile" ]; then
        >&2 echo "Invalid option: $hostfile is not a file"
        return 1
    fi

    if [ -z "${PXF_USER_HOME:-}" ]; then
        >&2 echo 'ERROR: $PXF_USER_HOME is blank or not set'
        return 1
    fi

    local tmpdir=$(mktemp -d --dry-run '/tmp/config.new.XXXXXX')
    gpssh -f "$hostfile" mkdir -p "$tmpdir" &&
    gpscp -f "$hostfile" -r "$config_dir" gpadmin@=:"$tmpdir" &&
    gpssh -f "$hostfile" mv "$config_dir{,.old}" &&
    gpssh -f "$hostfile" mv "$tmpdir" "$config_dir" &&
    gpssh -f "$hostfile" rm -rf "$config_dir.old" "$tmpdir" &&
    echo Successful
}

function doStartAll()
{
    local hostfile

    shift # don't try to parse the start-all arg
    if [ "$#" -eq 0 ]; then
        >&2 echo 'start-all requires arguments'
        printStartAllUsage
        return 1
    fi

    while getopts ':f:' opt; do
        case "${opt}" in
            f )
                hostfile="$2"
                ;;
            \? )
                >&2 echo "Unrecognized option: -$OPTARG"
                printStartAllUsage
                return 1
                ;;
            : )
                >&2 echo "Invalid option: -$OPTARG requires an argument"
                printStartAllUsage
                return 1
                ;;
        esac
    done

    if [ ! -e "$hostfile" ]; then
        >&2 echo "Invalid option: $hostfile is not a file"
        return 1
    fi

    if [ -z "${GPHOME:-}" ]; then
        >&2 echo 'ERROR: $GPHOME is blank or not set'
        return 1
    fi


    gpssh -f "$hostfile" "'$GPHOME'/pxf/bin/pxf start" &&
    echo Successful
}

pxf_script_command=$1

silent=false
if [ "$2" == "-y" ] || [ "$2" == "-Y" ]; then
	silent=true
fi

command=$1

validate_user
validate_system

case "${pxf_script_command}" in
	"init" )
		doInit
		;;
	"start" )
		doStart
		;;
	"stop" )
		doStop
		;;
	"restart" )
		doStop
		sleep 1s
		doStart
		;;
	"status" )
		doStatus
		;;
	"update-config" )
	    doUpdateConfig "$@"
	    ;;
	"start-all" )
	    validateParameters
	    doStartAll "$@"
	    ;;
	* )
		printUsage
		exit 2
		;;
esac

exit $?
